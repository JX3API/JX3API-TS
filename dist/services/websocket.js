import{JX3APIClient as t}from"../client.js";class e extends t{constructor(){super(...arguments),this.ws=null,this.subscriptions=new Map,this.reconnectAttempts=0,this.heartbeatTimer=null,this.config={reconnect:!0,reconnectInterval:5e3,maxReconnectAttempts:5,heartbeatInterval:3e4}}connect(t){this.config={...this.config,...t};const e=`${this.client.defaults.baseURL?.replace("http","ws")}/ws`;this.ws=new WebSocket(e),this.setupWebSocket(),this.startHeartbeat()}disconnect(){this.stopHeartbeat(),this.ws&&(this.ws.close(),this.ws=null),this.subscriptions.clear()}subscribe(t){const{event:e}=t;this.subscriptions.has(e)||this.subscriptions.set(e,[]),this.subscriptions.get(e)?.push(t),this.sendMessage({type:"subscribe",event:e,filter:t.filter})}unsubscribe(t,e){const s=this.subscriptions.get(t);if(s){const t=s.findIndex((t=>t.callback===e));-1!==t&&s.splice(t,1)}this.sendMessage({type:"unsubscribe",event:t})}setupWebSocket(){this.ws&&(this.ws.onopen=()=>{this.reconnectAttempts=0,this.subscriptions.forEach(((t,e)=>{t.forEach((t=>{this.sendMessage({type:"subscribe",event:e,filter:t.filter})}))}))},this.ws.onclose=()=>{this.stopHeartbeat(),this.config.reconnect&&this.reconnectAttempts<this.config.maxReconnectAttempts&&setTimeout((()=>{this.reconnectAttempts++,this.connect(this.config)}),this.config.reconnectInterval)},this.ws.onmessage=t=>{try{const e=JSON.parse(t.data);(this.subscriptions.get(e.type)||[]).forEach((t=>{this.matchFilter(e.data,t.filter)&&t.callback(e.data)}))}catch(t){console.error("Failed to parse WebSocket message:",t)}})}startHeartbeat(){this.heartbeatTimer=setInterval((()=>{this.sendMessage({type:"ping"})}),this.config.heartbeatInterval)}stopHeartbeat(){this.heartbeatTimer&&(clearInterval(this.heartbeatTimer),this.heartbeatTimer=null)}sendMessage(t){this.ws&&this.ws.readyState===WebSocket.OPEN&&this.ws.send(JSON.stringify(t))}matchFilter(t,e){if(!e)return!0;if(e.server&&t.server!==e.server)return!1;if(e.item_id&&t.item?.id!==e.item_id)return!1;if(e.price_range){const s=t.price||t.unit_price;if(s<e.price_range.min||s>e.price_range.max)return!1}return!0}}export{e as WebSocketService};
//# sourceMappingURL=websocket.js.map
